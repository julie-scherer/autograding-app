name: Auto Grading

on:
  pull_request_target:
    types: [opened, synchronize]
    branches:
      - main
      - "cicd/**"
    paths:
      - "submission/**"

permissions:
  checks: write
  actions: read
  contents: read

jobs:
  check_files:
    name: 'Check files changed'
    runs-on: ubuntu-latest
    outputs:
      all_changed_submission_files: ${{ steps.filtered-changed-files.outputs.all_changed_submission_files }}
      any_submission_changes: ${{ steps.filtered-changed-files.outputs.any_submission_changes }}
      changed_submission_files_push: ${{ steps.filtered-changed-files.outputs.changed_submission_files_push }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          repository: ${{ github.event.pull_request.head.repo.full_name }}
          ref: ${{ github.event.pull_request.head.sha }}
          token: ${{ secrets.PAT_TOKEN }}
          fetch-depth: 0

      - name: Get all changed files in the submission folder
        id: tj-actions-changed-files
        uses: tj-actions/changed-files@v44
        with:
          files: submission/**
          files_ignore: |
            .github/**/*
            submission/**
            prompts/**
            src/**
            Dockerfile
      
      - name: Get changed submission files in PR and current push
        id: filtered-changed-files
        run: |
          all_changed_submission_files="${{ steps.tj-actions-changed-files.outputs.all_changed_files }}"
          echo "List of submission files changed in PR: '$all_changed_submission_files'"
          echo "all_changed_submission_files=$all_changed_submission_files" >> $GITHUB_OUTPUT
          
          any_submission_changes=$(if [ -n "$all_changed_submission_files" ]; then echo 'true'; else echo 'false'; fi)
          echo "Any changes: $any_submission_changes"
          echo "any_submission_changes=$any_submission_changes" >> $GITHUB_OUTPUT
          
          before_sha="${{ github.event.before }}" #! "${{ github.event.pull_request.base.sha }}" 
          after_sha="${{ github.event.after }}"
          if ! git rev-parse --verify "$before_sha" >/dev/null || ! git rev-parse --verify "$after_sha" >/dev/null || [ -z "${{ github.event.before }}" ] || [ -z "${{ github.event.after }}" ]; then
            echo "One or both of the commit SHAs don't exist. Skipping git diff."
            filter_changed_files_push=()
          else
            changed_files_push="$(git diff --name-only $before_sha $after_sha)"
            filter_changed_files_push=()
            for file in $changed_files_push; do
              if [[ " $all_changed_submission_files " =~ " $file " ]]; then
                echo "Valid changes in $file"
                filter_changed_files_push+=( "$file" )
              fi
            done
          fi
          
          changed_submission_files_push=$(echo "${filter_changed_files_push[@]}" | xargs)
          echo "Filtered list of files changed in push: '$changed_submission_files_push'"
          echo "changed_submission_files_push=${changed_submission_files_push// /,}" >> $GITHUB_OUTPUT
          
      - name: Run step only if any submission file(s) changed in PR
        if: steps.filtered-changed-files.outputs.any_submission_changes == 'true'
        env:
          ALL_CHANGED_FILES: ${{ steps.filtered-changed-files.outputs.all_changed_submission_files }}
          PUSHED_CHANGED_FILES: ${{ steps.filtered-changed-files.outputs.changed_submission_files_push }}
        run: |
          echo "One or more files in the submission folder has changed."
          echo "Files changed in PR: '${ALL_CHANGED_FILES// /,}'"
          echo "Files changed in push: '${PUSHED_CHANGED_FILES// /,}'"

  configure_environment:
    name: 'Configure environment'
    runs-on: ubuntu-latest
    needs: [check_files]
    if: needs.check_files.outputs.any_submission_changes == 'true'
    outputs:
      assignment: ${{ steps.get_variables.outputs.assignment_name }}
      assignment_schema: ${{ steps.get_variables.outputs.schema_name }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Generate variables using GitHub context
        id: get_variables
        run: |
          assignment="dimensional-data-modeling" # ! $(basename "${{ github.event.repository.full_name }}")
          echo "Assignment: $assignment"
          echo "assignment_name=$assignment" >> $GITHUB_OUTPUT
          schema="$(echo "$(basename "${{ github.repository }}")" | tr '-' '_')_${{github.event.number}}_test"
          echo "Test Schema: $schema"
          echo "schema_name=$schema" >> $GITHUB_OUTPUT

  deploy_application:
    name: 'Deploy application'
    runs-on: ubuntu-latest
    needs: [check_files, configure_environment]
    if: needs.check_files.outputs.any_submission_changes == 'true'
    env:
      SUBMISSION_DIR: 'submission'
      CHANGED_FILES: ${{ needs.check_files.outputs.changed_submission_files_push }}
      ASSIGNMENT: ${{ needs.configure_environment.outputs.assignment }}
      ASSIGNMENT_SCHEMA: ${{ needs.configure_environment.outputs.assignment_schema }}
      PR_NUMBER: ${{ github.event.pull_request.number }}
      GITHUB_ORG: ${{ github.event.repository.owner.login }}
      GITHUB_REPO: ${{ github.repository }}
      SECRET_NAME: ${{ secrets.SECRET_NAME }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Add GitHub environment variables to '.env' file
        run: env > .env
      - name: Build the Docker image
        run: docker build -t autograding .
      - name: Run the autograding application
        run: docker run --env-file .env --name autograding autograding
