name: Auto Grading

on:
  pull_request_target:
    types: [opened, synchronize]
    paths:
      - "submission/jobs/job_*.py"
      - "submission/tests/test_*.py"

permissions:
  checks: write
  actions: read
  contents: read

jobs:
  get_upstream_repo:
    name: 'Get upstream repository'
    runs-on: ubuntu-latest
    outputs:
      upstream_repo: ${{ steps.get_repo_name.outputs.upstream_repo }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Get upstream repository name
        id: get_repo_name
        run: |
          echo "upstream_repo=$(basename "${{ github.event.repository.full_name }}")" >> $GITHUB_OUTPUT

  validate_pr_env:
    name: 'Check PR environment'
    runs-on: ubuntu-latest
    needs: get_upstream_repo
    outputs:
      correct_env: ${{ steps.compare_repo_envs.outputs.correct_env }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          repository: ${{ github.event.pull_request.head.repo.full_name }}
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 0
      - name: Get head repository name
        id: get_repo_name
        run: |
          echo "head_repo=$(basename "${{ github.event.pull_request.head.repo.full_name }}")" >> $GITHUB_OUTPUT
      - name: Compare upstream and head repositories
        id: compare_repo_envs
        env:
          UPSTREAM_REPO: ${{ needs.get_upstream_repo.outputs.upstream_repo }}
          HEAD_REPO: ${{ steps.get_repo_name.outputs.head_repo }}
        run: |
          if [ "${{ env.HEAD_REPO }}" != "${{ env.UPSTREAM_REPO }}" ]; then
            echo "correct_env=true" >> $GITHUB_OUTPUT
          else
            echo "----------------------------------------------------------------------------------"
            echo "⚠️ Workflow Error ⚠️"
            echo ""
            echo "You opened this pull request (PR) in your own copy (fork) of the project repository."
            echo "Forked repos do not have access to the secrets required for these actions."
            echo "To run the workflow, you need to open the PR in the main (upstream) repository."
            echo ""
            echo "Steps to fix:"
            echo "1. Go to the upstream repository your fork was created from on GitHub."
            echo "2. Click on 'Pull requests' and then 'New pull request'."
            echo "3. Select your forked repo and the branch you worked on in the 'compare' section."
            echo "4. Submit the pull request."
            echo ""
            echo "----------------------------------------------------------------------------------"
            exit 1
          fi
      
  check_files:
    name: 'Check files changed'
    runs-on: ubuntu-latest
    needs: validate_pr_env
    if: needs.validate_pr_env.outputs.correct_env == 'true'
    outputs:
      all_changed_submission_files: ${{ steps.filtered-changed-files.outputs.all_changed_submission_files }}
      any_submission_changes: ${{ steps.filtered-changed-files.outputs.any_submission_changes }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          repository: ${{ github.event.pull_request.head.repo.full_name }}
          ref: ${{ github.event.pull_request.head.sha }}
          token: ${{ secrets.PAT_TOKEN }}
          fetch-depth: 0
      - name: Get all changed files
        id: tj-actions-changed-files
        uses: tj-actions/changed-files@v44
        with:
          files: |
            submission/jobs/*.py
            submission/tests/*.py
          files_ignore: |
            .github/**/*
            prompts/**
            submission/tests/**
            submission/jobs/__init__.py
            Dockerfile
      
      - name: Get changed files in PR and push
        id: filtered-changed-files
        run: |
          all_changed_submission_files="${{ steps.tj-actions-changed-files.outputs.all_changed_files }}"
          echo "List of submission files changed in PR: '$all_changed_submission_files'"
          echo "all_changed_submission_files=$all_changed_submission_files" >> $GITHUB_OUTPUT
          
          any_submission_changes=$(if [ -n "$all_changed_submission_files" ]; then echo 'true'; else echo 'false'; fi)
          echo "Any changes: $any_submission_changes"
          echo "any_submission_changes=$any_submission_changes" >> $GITHUB_OUTPUT
          
          before_sha="${{ github.event.pull_request.base.sha }}" 
          after_sha="${{ github.event.after }}"
          if ! git rev-parse --verify "$before_sha" >/dev/null || ! git rev-parse --verify "$after_sha" >/dev/null || [ -z "${{ github.event.before }}" ] || [ -z "${{ github.event.after }}" ]; then
            echo "One or both of the SHAs don't exist. Skipping git diff."
            filter_changed_files_push=()
          else
            changed_files_push="$(git diff --name-only $before_sha $after_sha)"
            filter_changed_files_push=()
            for file in $changed_files_push; do
              if [[ " $all_changed_submission_files " =~ " $file " ]]; then
                echo "Valid changes in $file"
                filter_changed_files_push+=( "$file" )
              fi
            done
          fi

      - name: Run step only if submission file(s) changed
        if: steps.filtered-changed-files.outputs.any_submission_changes == 'true'
        env:
          ALL_CHANGED_FILES: ${{ steps.filtered-changed-files.outputs.all_changed_submission_files }}
        run: |
          echo "One or more files in the `submission/` folder has changed."
          echo "Files changed in PR: '${ALL_CHANGED_FILES// /,}'"

  configure_environment:
    name: 'Configure environment'
    runs-on: ubuntu-latest
    needs: [check_files]
    if: needs.check_files.outputs.any_submission_changes == 'true'
    outputs:
      assignment: ${{ steps.get_variables.outputs.assignment_name }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Generate variables using GitHub context
        id: get_variables
        run: |
          assignment=$(basename "${{ github.event.repository.full_name }}")     #! "spark-data-quality"
          echo "Assignment: $assignment"
          echo "assignment_name=$assignment" >> $GITHUB_OUTPUT

  deploy_application:
    name: 'Deploy application'
    runs-on: ubuntu-latest
    needs: [check_files, configure_environment]
    if: needs.check_files.outputs.any_submission_changes == 'true'
    env:
      SUBMISSION_DIR: 'submission'
      ASSIGNMENT: ${{ needs.configure_environment.outputs.assignment }}
      PR_NUMBER: ${{ github.event.pull_request.number }}
      GITHUB_ORG: ${{ github.event.repository.owner.login }}
      GITHUB_REPO: ${{ github.repository }}
      SECRET_NAME: ${{ secrets.SECRET_NAME }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Add GitHub environment variables to '.env' file
        run: env > .env
      - name: Build the Docker image
        run: docker build -t autograding .
      - name: Run the autograding application
        run: docker run --env-file .env --name autograding autograding
